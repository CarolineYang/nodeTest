// 给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。
// 有效的 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 '.' 分隔。
// 例如："0.1.2.201" 和 "192.168.1.1" 是 有效的 IP 地址，但是 "0.011.255.245"、"192.168.1.312" 和 "192.168@1.1" 是 无效的 IP 地址。

// 输入：s = "101023"
// 输出：["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]
// 输入：s = "0000"
// 输出：["0.0.0.0"]
// 输入：s = "25525511135"
// 输出：["255.255.11.135","255.255.111.35"]
// 输入：s = "010010"
// 输出：["0.10.0.10","0.100.1.0"]
//DFS BFS 动态规划 回溯算法加枝减
var restoreIpAddresses = function(s) {
    let res = [];

    let visit = new Set();
    const loop = (arr,begin)=>{
        if(arr.length == 4){
            res.push(arr)
            return ;
        }
        for(let i=0;i<s.length;i++){
            if(i==0 && s[i]==0){
                arr.push(0);
                loop(arr);
            }
        }
    }
    loop([],0)
};
